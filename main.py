import random
from sqlalchemy import func
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from models import session, initialize_database, User, Word, UserWord
from user_logging import add_user_to_json

print('Starting telegram bot / –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞...')

state_storage = StateMemoryStorage()
token_bot = ''
bot = TeleBot(token_bot, state_storage=state_storage)


def show_hint(*lines):
    return '\n'.join(lines)

def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/cards - –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        f"{Command.ADD_WORD} - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        f"{Command.DELETE_WORD} - –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    bot.send_message(message.chat.id, help_text)


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_or_create_user(chat_id):
    user = session.query(User).filter_by(chat_id=chat_id).first()
    if not user:
        user = User(chat_id=chat_id)
        session.add(user)
        session.commit()

        # –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
        for word in session.query(Word).all():
            user_word = UserWord(user_id=user.user_id, word_id=word.word_id)
            session.add(user_word)
        session.commit()

    return user.user_id


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ä–∞–∑—É 4 —Å–ª–æ–≤–∞)
def get_user_words(user_id):
    words = (
        session.query(Word.target_word, Word.translate_word)
        .join(UserWord, isouter=True)
        .filter(UserWord.user_id.in_([user_id, None]))
        .order_by(func.random())
        .limit(4)
        .all()
    )
    return words


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_word_to_db(user_id, target_word, translate_word):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ —Å–ª–æ–≤–æ –≤ —Ç–∞–±–ª–∏—Ü–µ Word
    word = session.query(Word).filter_by(target_word=target_word, translate_word=translate_word).first()
    if not word:
        # –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É Word
        word = Word(target_word=target_word, translate_word=translate_word)
        session.add(word)
        session.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —ç—Ç–∏–º —Å–ª–æ–≤–æ–º
    user_word_link = session.query(UserWord).filter_by(user_id=user_id, word_id=word.word_id).first()
    if not user_word_link:
        # –ï—Å–ª–∏ —Å–≤—è–∑–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Ç–∞–±–ª–∏—Ü—É UserWord
        user_word_link = UserWord(user_id=user_id, word_id=word.word_id)
        session.add(user_word_link)
        session.commit()


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def send_welcome(message):
    cid = message.chat.id
    user_id = get_or_create_user(cid)
    username = message.from_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è –∑–∞—Ö–æ–¥–∞ –≤ JSON —Ñ–∞–π–ª
    add_user_to_json(username)

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n\n"
        "–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n\n"
        "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï\n"
        "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô\n\n"
        "–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è\n"
        "–ù–∞–∂–º–∏ —Å—é–¥–∞: /cards –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: /cards\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –Ω–∞–∂–º–∏ /help"
    )
    bot.send_message(cid, welcome_text)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º (–ø–µ—Ä–µ–≤–æ–¥, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏)
@bot.message_handler(commands=['cards'])
def create_cards(message):
    cid = message.chat.id
    user_id = get_or_create_user(cid)
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []

    # –ü–æ–ª—É—á–∞–µ–º 4 —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    words = get_user_words(user_id)

    if not words:
        bot.send_message(cid, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞.")
        return

        # –í—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
    target_word = random.choice(words)
    translate = target_word.translate_word

    # –ü–æ–ª—É—á–∞–µ–º 3 –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤–∞, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
    filtered_words = [word for word in words if word.target_word != target_word.target_word]
    other_words = random.sample(filtered_words, 3)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    options = [target_word.target_word] + [word.target_word for word in other_words]
    random.shuffle(options)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–ø—Ü–∏–π
    buttons = [types.KeyboardButton(option) for option in options]
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([delete_word_btn, add_word_btn, next_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word.target_word
        data['translate_word'] = translate
        data['other_words'] = other_words


# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É (—Å–ª–æ–≤–æ)
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_word_from_db(user_id, target_word):
    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–æ –≤ —Ç–∞–±–ª–∏—Ü–µ Word
    word = session.query(Word).filter_by(target_word=target_word).first()
    if word:
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –≤ —Ç–∞–±–ª–∏—Ü–µ UserWord –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ª–æ–≤–∞
        user_word_link = session.query(UserWord).filter_by(user_id=user_id, word_id=word.word_id).first()
        if user_word_link:
            session.delete(user_word_link)
            session.commit()
            return True
    return False


# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    cid = message.chat.id
    bot.send_message(cid, "–í—ã–±–µ—Ä–∏ —Å–ª–æ–≤–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, remove_word)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
def remove_word(message):
    cid = message.chat.id
    user_id = get_or_create_user(cid)
    try:
        target_word = message.text.strip()
        words = get_user_words(user_id)
        if len(words) <= 1:
            bot.send_message(message.chat.id, "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ, –µ–≥–æ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å. –£ —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        else:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Å–ª–æ–≤–æ–º
            if delete_word_from_db(user_id, target_word):
                bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{target_word}' —É–¥–∞–ª–µ–Ω–æ\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–∏–º–∞–π —Å—é–¥–∞ - /cards")
            else:
                bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{target_word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤.")
    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        print(e)


# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    bot.send_message(cid,
                     "–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –°–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Peace, –ú–∏—Ä):")
    bot.register_next_step_handler(message, save_new_word)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
def save_new_word(message):
    cid = message.chat.id
    user_id = get_or_create_user(cid)
    try:
        target_word, translate_word = message.text.split(',')
        target_word = target_word.strip()
        translate_word = translate_word.strip()
        add_word_to_db(user_id, target_word, translate_word)
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{target_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{translate_word}'\n"
                                          "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–∏–º–∞–π —Å—é–¥–∞ - /cards")
    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        print(e)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))


if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    initialize_database()
    print('The bot is running / –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    bot.infinity_polling(skip_pending=True)
